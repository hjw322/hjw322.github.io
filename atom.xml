<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wen&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hjw322.vip/"/>
  <updated>2019-08-12T14:21:01.298Z</updated>
  <id>http://hjw322.vip/</id>
  
  <author>
    <name>hjw</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WhaleCTF WriteUp</title>
    <link href="http://hjw322.vip/2019/08/12/WhaleCTF%20WriteUp/"/>
    <id>http://hjw322.vip/2019/08/12/WhaleCTF WriteUp/</id>
    <published>2019-08-12T13:10:39.345Z</published>
    <updated>2019-08-12T14:21:01.298Z</updated>
    
    <content type="html"><![CDATA[<p>😁</p><a id="more"></a><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="Decode1"><a href="#Decode1" class="headerlink" title="Decode1"></a>Decode1</h2><p>将文件中的数字放在Hex中</p><img src="https://i.loli.net/2019/08/12/BTipYELuyHlqrWK.jpg" width="300"><p>再将右边的字符串进行URL解码得</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MTE5CjEwMQoxMDgKOTkKMTExCjEwOQoxMDEKMTE2CjExMQoxMTgKMTAxCjExMAoxMTcKMTE1</span><br></pre></td></tr></table></figure><p>再base64解码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">119 101 108 99 111 109 101 116 111 118 101 110 117 115</span><br></pre></td></tr></table></figure><p>最后根据ascll表转换为字符型为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">welcometovenus</span><br></pre></td></tr></table></figure><p>最终的flag为key{welcometovenus}</p><h1 id="隐写"><a href="#隐写" class="headerlink" title="隐写"></a>隐写</h1><h2 id="Find"><a href="#Find" class="headerlink" title="Find"></a>Find</h2><p>用stegsolve打开，即可看到一个二维码，用微信扫描即可得flag。</p><img src="https://i.loli.net/2019/08/12/KN7jIRaT5ZV8Erw.jpg" width="300"><h2 id="被我吃了"><a href="#被我吃了" class="headerlink" title="被我吃了"></a>被我吃了</h2><p>用Hex fiend打开，在找到jpg文件尾FFD9，分离出504B开头的后缀为zip压缩包，解压后即可得flag。</p><img src="https://i.loli.net/2019/08/12/2qDHwyQnkpIx9uZ.jpg" width="300"><h2 id="合体鲸鱼"><a href="#合体鲸鱼" class="headerlink" title="合体鲸鱼"></a>合体鲸鱼</h2><p>用stegsolve打开，再依次选择Analyse、Frame Browser就会发现有两张图，第二张图中就有flag。</p><img src="https://i.loli.net/2019/08/12/bwdAihv1VF5DTQl.jpg" width="300"><h2 id="亚种"><a href="#亚种" class="headerlink" title="亚种"></a>亚种</h2><p>Hex打开搜索flag。</p><img src="https://i.loli.net/2019/08/12/q82ld6fKCX5Riuw.jpg" width="300"><h2 id="下雨天"><a href="#下雨天" class="headerlink" title="下雨天"></a>下雨天</h2><p>查看16进制文件头，发现为gif文件，则改后缀为gif，然后用stegsolve打开，依次选择Analyse、Frame Browser后查看每一帧图即可看到falg；mac电脑直接用预览打开即可查看每一帧图片。</p><h2 id="这是什么"><a href="#这是什么" class="headerlink" title="这是什么"></a>这是什么</h2><p>hex打开查看尾部，会发现一串特殊的字符，将这串字符进行unicode转ascll即可得到flag。</p><img src="https://i.loli.net/2019/08/12/GRtu6UbV4yqJQrI.jpg" width="300"><h2 id="IHDR"><a href="#IHDR" class="headerlink" title="IHDR"></a>IHDR</h2><p>在Hex中改图片高度，即可在图片底部看到flag，图片可用stegsolve查看。</p><img src="https://i.loli.net/2019/08/12/fobrR18CuNn5LwO.jpg" width="300"><h2 id="愤怒的小猪"><a href="#愤怒的小猪" class="headerlink" title="愤怒的小猪"></a>愤怒的小猪</h2><p>用stegsolve打开，向左的箭头点一下可看到一个二维码，扫码即可</p><img src="https://i.loli.net/2019/08/12/32CXyW8BiQuGkFN.jpg" width="300"><h2 id="真是动图"><a href="#真是动图" class="headerlink" title="真是动图"></a>真是动图</h2><p>用Hex打开，发现头部应该是gif，但缺少了一部分，在16进制头上加上47494638保存可得到能打开的gif文件查看每一张图片，最后得到的passwd为</p><p><code>Y2F0Y2hfdGhlX2R5bmFtaWNfZmxhZ19pc19xdWl0ZV9zaW1wbGU=</code></p><p>将它进行base64解码即可，最终的flag为</p><p><code>key{catch_the_dynamic_flag_is_quite_simple}</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;😁&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://hjw322.vip/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>【BugkuCTF】杂项writeup</title>
    <link href="http://hjw322.vip/2019/08/10/%E3%80%90BugkuCTF%E3%80%91%E6%9D%82%E9%A1%B9writeup/"/>
    <id>http://hjw322.vip/2019/08/10/【BugkuCTF】杂项writeup/</id>
    <published>2019-08-10T15:38:54.414Z</published>
    <updated>2019-08-11T09:03:11.426Z</updated>
    
    <content type="html"><![CDATA[<p>目前的writeup只有前面的一些简单题，其它的题等我会做了，我会更新此文章。</p><a id="more"></a><h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><p>这道题就没有什么说的了，扫二维码。</p><h2 id="这是一张单纯的图片"><a href="#这是一张单纯的图片" class="headerlink" title="这是一张单纯的图片"></a>这是一张单纯的图片</h2><p>Hex Fiend打开，滑到最后，可看到</p><img src="https://i.loli.net/2019/08/10/nrcgqaoVtNBpMCu.jpg" width="300"><p>复制那些特殊的字符串(此为unicode编码）用工具转ascll即可得到flag。</p><p>工具链接：<a href="http://tool.chinaz.com/tools/unicode.aspx" target="_blank" rel="noopener">http://tool.chinaz.com/tools/unicode.aspx</a></p><h2 id="隐写"><a href="#隐写" class="headerlink" title="隐写"></a>隐写</h2><p>解压缩后发现此图片打不开，这张情况一般是修改了图片的高度或者宽度，用Hex打开，修改图片的高度，再用StegSolve打开即可看到flag。</p><img src="https://i.loli.net/2019/08/10/uz71BcAXdwqNFLn.jpg" width="300"><h2 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h2><p>解压后是一个后缀名为pcap的流量包，用Wireshark打开进一步分析。</p><p>右键，依次选择Follow、TCP Stream，即可发现flag。</p><img src="https://i.loli.net/2019/08/11/I9uAYbCyoEKZrTs.jpg" width="300"><h2 id="眼见非实-ISCCCTF"><a href="#眼见非实-ISCCCTF" class="headerlink" title="眼见非实(ISCCCTF)"></a>眼见非实(ISCCCTF)</h2><p>下载后用Hex打开发现文件头为504B，即此文件为一个zip文件，则重命名改后缀为zip。解压后的文件的文件头仍是504B，继续改后缀为zip再解压得到一个文件夹。最后在该文件夹的word文件夹中 document.xml 中发现flag。</p><img src="https://i.loli.net/2019/08/11/c8WN4oytiOXGpMU.jpg" width="300"><h2 id="啊哒"><a href="#啊哒" class="headerlink" title="啊哒"></a>啊哒</h2><p>解压后是一张jpg图片，Hex打开查找文件尾 FFD9 ，可看到它之后有一个zip文件头，从504B开始复制粘贴新建一个文件。也可以使用 binwalk、foremost 等工具分离zip压缩包。</p><img src="https://i.loli.net/2019/08/11/yci82AeH9maV4hq.jpg" width="300"><br><img src="https://i.loli.net/2019/08/11/IV8iKlmNDYs6Z3L.jpg" width="300"><p>发现该zip文件需要密码，之前的表情包图片的属性中有个设备型号，将该型号进行16进制解码可得压缩包的密码。</p><img src="https://i.loli.net/2019/08/11/ucqVIjvoA13hawH.jpg" width="300"><p>压缩包打开后可得flag。</p><h2 id="又一张图片，还单纯吗"><a href="#又一张图片，还单纯吗" class="headerlink" title="又一张图片，还单纯吗"></a>又一张图片，还单纯吗</h2><p>使用工具 binwalk 发现该图片有隐藏文件，再使用 foremost 分离出来得到一张含有flag的图片。</p><img src="https://i.loli.net/2019/08/11/p7DQkTzJRKNB8hv.jpg" width="300"><br><img src="https://i.loli.net/2019/08/11/258KdOJpFLVhivQ.jpg" width="300"><br><img src="https://i.loli.net/2019/08/11/MwP3dclEYTvOkiZ.jpg" width="300"><h2 id="猜"><a href="#猜" class="headerlink" title="猜"></a>猜</h2><p>直接百度识图</p><img src="https://i.loli.net/2019/08/11/Tgwq58WCb2IZdnf.jpg" width="300"><br><img src="https://i.loli.net/2019/08/11/KDFn278koIHiXjT.jpg" width="300"><h2 id="隐写2"><a href="#隐写2" class="headerlink" title="隐写2"></a>隐写2</h2><p>foremost分离出一个压缩包打开后有一张提示图片和一个压缩包，根据提示可知，king、Athens、梅花J，对应数字8、1、7。密码即为这3个数的组合，最终密码为871。</p><p>得到的rar压缩包的文件头为504B，则改后缀为zip。打开后得到一张图片，用Hex打开在尾部发现 f1@g{eTB1IEFyZSBhIGhAY2tlciE=}</p><p>将 eTB1IEFyZSBhIGhAY2tlciE= 用base64解码即可得flag。</p><p>flag为 f1@g{y0u Are a h@cker!}</p><p>对与此压缩包，可以直接用fcrackzip进行爆破。</p><p><img src="https://i.loli.net/2019/08/11/D9253sNmaXAikpl.jpg" width="300"></p><h2 id="多种方法解决"><a href="#多种方法解决" class="headerlink" title="多种方法解决"></a>多种方法解决</h2><p>将exe文件用Hex打开可发现此文件并不是一个真的exe文件。</p><img src="https://i.loli.net/2019/08/11/uUrBknQtyDHYZJ4.jpg" width="300"><p>将右边的文本用base64解码得一张二维码图片，扫码可得flag。</p><p><img src="https://i.loli.net/2019/08/11/29hDsCdF7qMpzH8.jpg" width="300"></p><p>转换工具：<a href="http://imgbase64.duoshitong.com/" target="_blank" rel="noopener">http://imgbase64.duoshitong.com/</a></p><h2 id="闪的好快"><a href="#闪的好快" class="headerlink" title="闪的好快"></a>闪的好快</h2><p>用StegSolve打开，依次选择Analyse、Frame Browser。</p><img src="https://i.loli.net/2019/08/11/C4fYLkjAwbcxd8u.jpg" width="300"><p>18张二维码依次扫描连起来即为flag，为</p><p><code>SYC{F1aSh_so_f4sT}</code></p><h2 id="白哥的鸽子"><a href="#白哥的鸽子" class="headerlink" title="白哥的鸽子"></a>白哥的鸽子</h2><p>增加后缀jpg，在hex中打开发现末尾为</p><img src="https://i.loli.net/2019/08/11/ViNHgYLGj1PEmC6.jpg" width="300"><p>猜测这种形式多半与flag有关，用删栏密码破解得flag</p><img src="https://i.loli.net/2019/08/11/bRNpUunT6HFX8Ef.jpg" width="300"><p>删栏密码破解网站：<a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php" target="_blank" rel="noopener">https://www.qqxiuzi.cn/bianma/zhalanmima.php</a></p><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p>连续两次解压后得test文件夹，其含有flag文件，使用<code>cat</code>命令即可看flag。</p><img src="https://i.loli.net/2019/08/11/FRkonWbBi7XpMHC.jpg" width="300"><h2 id="隐写3"><a href="#隐写3" class="headerlink" title="隐写3"></a>隐写3</h2><p>用StegSolve打开，很明显该图片被修改了高度，则在Hex中修改高度即可看到flag。</p><p><img src="https://i.loli.net/2019/08/11/EKv7FCnUmyiJNao.jpg" width="300"></p><h2 id="做个游戏-08067CTF"><a href="#做个游戏-08067CTF" class="headerlink" title="做个游戏(08067CTF)"></a>做个游戏(08067CTF)</h2><p>将heiheihei.jar用JD-GUI打开，在PlaneGameFrame.class中可看到flag</p><p><img src="https://i.loli.net/2019/08/11/svzAL1iWR6tpgnG.jpg" width="300"></p><h2 id="Linux2"><a href="#Linux2" class="headerlink" title="Linux2"></a>Linux2</h2><p>得到的flag文件开头16进制为空，目前不知道怎么做，就根据题目给的提示直接在Hex中搜索KEY，结果还真的有flag。</p><img src="https://i.loli.net/2019/08/11/SMWX1zEbA32oDgV.jpg" width="300"><h2 id="细心的大象"><a href="#细心的大象" class="headerlink" title="细心的大象"></a>细心的大象</h2><p>得到的大象图片中可以分离出一个rar压缩包，只是需要密码，根据题目提示，我们在图片的属性中看到很多信息其中的备注很值得注意，进行base64解码后即为压缩包的密码，打开后修改图片高度即可看到flag。</p><img src="https://i.loli.net/2019/08/11/hmrIzNTkGdFqVyM.jpg" width="300">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前的writeup只有前面的一些简单题，其它的题等我会做了，我会更新此文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://hjw322.vip/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>mac下使用hexo+github简单搭建个人博客</title>
    <link href="http://hjw322.vip/2019/07/18/mac%E4%B8%8B%E4%BD%BF%E7%94%A8hexo+github%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://hjw322.vip/2019/07/18/mac下使用hexo+github简单搭建个人博客/</id>
    <published>2019-07-18T12:47:01.706Z</published>
    <updated>2019-07-20T14:46:16.035Z</updated>
    
    <content type="html"><![CDATA[<p>本文为我搭建博客时的过程及一些注意事项</p><a id="more"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>   去<a href="https://www.jianshu.com/go-wild?ac=2&url=https%3A%2F%2Fnodejs.org%2Fen%2F" target="_blank">Node.js</a>官网下载相应的安装包，一路安装即可。</p><p>   检验安装成功：</p><p>   <code>$ node -v</code></p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>   Mac下安装Xcode就自带Git。如果没有Xcode可以参考<a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo官网</a>上的安装方法。</p><p>   检验安装成功：</p><p>   <code>$ Git --version</code></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a></h3><p>   安装时注意权限问题，加上sudo，其中-g表示全局安装。</p><p>   <code>$ sudo npm install hexo-cli -g</code></p><h2 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h2><p>这一步不是必须的，配置SSH Key的话之后每次更新博客就不用都输入用户名和密码，可以方便一些。</p><h3 id="检查本机上是否已经存在SSH-Key"><a href="#检查本机上是否已经存在SSH-Key" class="headerlink" title="检查本机上是否已经存在SSH Key"></a>检查本机上是否已经存在SSH Key</h3><p>打开终端，输入如下命令</p><p><code>$ cd .ssh</code></p><p><code>$ ls -la</code></p><p>检查终端输出的文件列表中是否已经存在id_rsa.pub 或 id_dsa.pub 文件，如果文件已经存在，则直接进入第3步。</p><h3 id="创建一个SSH-Key"><a href="#创建一个SSH-Key" class="headerlink" title="创建一个SSH Key"></a>创建一个SSH Key</h3><p>在终端输入如下命令(将<a href="mailto:your_email@example.com" target="_blank" rel="noopener">your_email@example.com</a>改为你注册GitHub时的邮箱地址)</p><p><code>$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code></p><p>按下回车，让你输入文件名，直接回车会创建使用默认文件名的文件(推荐使用默认文件名)，然后会提示你输入两次密码，可以为空（即直接回车）。</p><h3 id="添加SSH-Key到Github"><a href="#添加SSH-Key到Github" class="headerlink" title="添加SSH Key到Github"></a>添加SSH Key到Github</h3><p>如果你没有指定文件名（也就是使用的默认文件名），那么你的.ssh文件夹下（可以在终端输入open ~/.ssh打开文件夹），应该有一个id_rsa.pub文件了，打开该文件，复制里面的文本（该文本即为ssh key）添加到GitHub的add ssh key中，路径为GitHub-&gt;Setting-&gt;SSH and GPG keys-&gt;New SSH key。Title里填写任意标题，将复制的内容粘贴到key中，点击Add key完成添加。</p><h3 id="检验SSH-Key是否配置成功"><a href="#检验SSH-Key是否配置成功" class="headerlink" title="检验SSH Key是否配置成功"></a>检验SSH Key是否配置成功</h3><p>在终端输入如下命令</p><p><code>$ ssh -T git@github.com</code></p><p>如果出现</p><p><em>Are you sure you want to continue connecting (yes/no)?</em></p><p>请输入yes再按回车。如果最后出现</p><p><em>Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.</em></p><p>就说明你的SSH Key配置成功了。</p><h3 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h3><p>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。 Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字根据自己的喜好自己取，而不是GitHub的昵称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;ryanlijianchang&quot;//用户名</span><br><span class="line">$ git config --global user.email  &quot;liji.anchang@163.com&quot;//填写自己的邮箱</span><br></pre></td></tr></table></figure><h2 id="博客初始化"><a href="#博客初始化" class="headerlink" title="博客初始化"></a>博客初始化</h2><p>创建存储博客的文件（可以在任意位置），比如命名为myblog，然后在终端cd到myblog之中（此为后面提到的站点）。执行下述命令初始化本地博客，下载一系列文件。</p><p><code>$ hexo init</code></p><p>接下来安装依赖包</p><p><code>$ nom install</code></p><p>注意：若安装报错，可以加上sudo试试。</p><p>到这里本地博客就搭建好了。执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate          或$ hexo g</span><br><span class="line">$ hexo server            或$ hexo s</span><br></pre></td></tr></table></figure><p>在浏览器输入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>就可以进行查看了。</p><p>当然这个博客是本地的，别人是无法访问的，之后我们需要部署到GitHub上。</p><h2 id="本地博客部署到GitHub"><a href="#本地博客部署到GitHub" class="headerlink" title="本地博客部署到GitHub"></a>本地博客部署到GitHub</h2><p>登陆GitHub后新建仓库</p><p>路径为：右上角+号-&gt;new repository</p><p>注意：新建的仓库名称格式为username.github.io。例如我的username是BreadAwesome，那么新创建的仓库的名字便是BreadAwesome.github.io。其它的选项或者需要填写的可以不管，直接create repository。</p><p>终端cd到myblog文件夹下</p><p>编辑文件夹中的_config.yml（即站点配置文件）中的deploy节点（在文档最后部分）</p><p>注意：可以用文本编辑器或Xcode打开，也可以在终端编辑，命令如下：</p><p><code>$ vim _config.yml</code></p><p>配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:username/username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>注意：在配置中的冒号后均有空格,如type：后有空格。第一个username为GitHub昵称，第二个为创建仓库时的名称，但一般创建仓库时会使这两个名称是一样的。</p><p>此时repository为这种形式是因为配置了ssh key，如果没有配置ssh key则使用https形式的地址，如下</p><p><em>repository: <a href="https://github.com/username/username.github.io.git" target="_blank" rel="noopener">https://github.com/username/username.github.io.git</a></em></p><p>部署到Github上还需要一个插件hexo-deployer-git</p><p><code>$ npm install hexo-deployer-git --save</code></p><p>若报错，则加上sudo</p><p>再输入以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean              //清除hexo的缓存</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>deploy可以与generate一样写为d</p><p>若执行hexo g出错则执行<em>npm install hexo –save</em>，若执行hexo d报错为<em>ERROR Deployer not found: git</em>，那么就是你的deployer没有安装成功(可能是安装位置的问题)，你需要执行如下命令再安装一次:</p><p><em>npm install hexo-deployer-git –save</em></p><p>错误修正后再次执行hexo g和hexo d上传到服务器。</p><p>若未关联GitHub，执行hexo d时会提示输入GitHub账号用户名和密码，即:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username for &apos;https://github.com&apos;:</span><br><span class="line">password for &apos;https://github.com&apos;:</span><br></pre></td></tr></table></figure><p>hexo d执行成功后便可通过<a href="https://username.github.io" target="_blank" rel="noopener">https://username.github.io</a> 访问博客，看到的内容和<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 相同。</p><p>此时就可以说博客已经搭建好了，本文之后的内容即为博客优化方面，比如主题，绑定域名等。</p><h2 id="更换Hexo主题"><a href="#更换Hexo主题" class="headerlink" title="更换Hexo主题"></a>更换Hexo主题</h2><p>可以选择<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题官网页面</a>搜索喜欢的theme，本文我选择hexo-theme-next为例（目前我自己用的主题为<a href="http://moxfive.coding.me/yelee/" target="_blank" rel="noopener">yelee</a>）,关于next,如下</p><p>终端cd到myblog文件夹下执行如下所示命令。</p><p><code>$ git clone https://github.com/iissnan/hexo-theme-next themes/next</code></p><p>注意：下载完后可以查看blog文件夹下的themes文件夹中是否有next文件夹，若没有则前往next版本<a href="https://github.com/iissnan/hexo-theme-next/releases" target="_blank" rel="noopener">发布页面</a>选择需要的版本，下载 Download 区域下的 Source Code (zip) 到本地，解压所下载的压缩包至站点的 themes 目录下， 并将解压后的文件夹名称更改为next。</p><p>完成后打开站点配置文件，找到 theme 字段，并将landscape更改为 next。</p><p>可以先验证此主题，在验证之前，可以使用hexo clean来清除hexo的缓存</p><p>验证主题可以看成是一个调试的过程，命令为</p><p><code>$ hexo s --debug</code></p><p> 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：</p><p> <em>INFO  Hexo is running at <a href="http://0.0.0.0:4000/" target="_blank" rel="noopener">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.</em></p><p> 此时即可使用浏览器访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，检查站点是否正确运行。</p><p> 关于主题其它项目的设定可以访问以下地址：</p><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a></p><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html</a></p><p>当检查站点是正确运行后，执行如下命令（每次部署文章的步骤）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g  //生成缓存和静态文件</span><br><span class="line">$ hexo d  //重新部署到服务器</span><br></pre></td></tr></table></figure><p>以上操作完后，可能要等一段时间才能看到你的更改后的博客界面。</p><p>其余的设置之后再更，谢谢！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文为我搭建博客时的过程及一些注意事项&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://hjw322.vip/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://hjw322.vip/2019/07/16/hello-world/"/>
    <id>http://hjw322.vip/2019/07/16/hello-world/</id>
    <published>2019-07-16T07:46:09.306Z</published>
    <updated>2019-07-20T14:46:31.741Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
